name "platform_driver_ethercat"
# Optionally declare the version number
# version "0.1"

using_library "platform_driver_ethercat"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "platform_driver_ethercatTypes.hpp"
import_types_from "platform_driver_ethercat/PlatformDriverEthercatTypes.h"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the platform_driver namespace.
task_context "Task" do
    default_activity :periodic, 0.04
    needs_configuration
    # A configuration property (here, a std::string). Its value can be retrieved
    # in the C++ code with # _config_value.get() and _config_value.set(new_value).
    #property "config_value", "/std/string"
    property("dev_address","/std/string").doc("device address in the system")
    property("num_slaves","unsigned int").doc("Number of can slaves in the platform")
    property("configs","std/vector<platform_driver_ethercat/DriveConfig>").doc("Configuration parameters for Elmo drives") # not used directly, workaround for rock not handling yaml aliases properly
    property("current_factor","double").doc("system current measurement factor to convert from internal to physical units")
    property("voltage_factor","double").doc("system voltage measurement factor to convert from internal to physical units")
    property("drive_mapping","platform_driver_ethercat/DriveSlaveMapping").doc("Elmo drives slave mapping and config")
    property("fts_mapping","platform_driver_ethercat/FtsSlaveMapping").doc("Force torque sensor slave mapping")
    property("passive_mapping", "platform_driver_ethercat/PassiveJointMapping").doc("Passive joints slave mapping")

    # An input port, i.e. an object from which the component gets data from
    # other components' outputs
    #
    # Data can be retrieved using _input.read(value), which returns true if data
    # was available, and false otherwise. _input.connected() returns if this
    # input is connected to an output or not.
    input_port "joints_commands", "base/commands/Joints"

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port "joints_readings", '/base/samples/Joints'
    output_port "fts_readings", "/base/samples/Wrenches"
    output_port "temp_readings", "/platform_driver_ethercat/Temperatures"
end
